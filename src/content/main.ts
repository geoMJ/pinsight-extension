/*
 * Pinterest AI Blocker : removes AI-generated content from your Pinterest feed and search results
 * By Marianne J
 * Thanks for checking out my project!
 */

/** Utility function used to avoid too many requests to the server when checking pins */
const debounce = <CallbackWithArgs extends (...args: any[]) => void>(
    fn: CallbackWithArgs,
    t: number
) => {
    let timer: number;
    return function (...args: Parameters<CallbackWithArgs>) {
        clearTimeout(timer);
        timer = setTimeout(() => fn(...args), t);
    };
};

/** Map to store and classify processed pins so we don't re-check them (and re-send requests) */
const processedPins = new Map<string, "human" | "ai">();

/**********  PIN REMOVAL LOGIC **********/

/** Hides the pin (the other grid elements will adjust accordingly) */
const removePin = (pinWrapper: HTMLDivElement) => {
    console.log("removing ai pin");
    pinWrapper.style.display = "none";
    pinWrapper.parentElement?.remove();
};

/** Checks if a pin is tagged as AI-generated by Pinterest */
const processPinLink = async (pinUrl: string, pinWrapper: HTMLDivElement) => {
    const parser = new DOMParser();
    const pinPageResponse = await fetch(pinUrl);
    const htmlPageContent = await pinPageResponse.text();
    const doc = parser.parseFromString(htmlPageContent, "text/html");

    const contentIsAI =
        doc.querySelector("[data-test-id*='ai-generated']") !== null;
    processedPins.set(pinUrl, contentIsAI ? "ai" : "human");
    console.log(processedPins);

    if (contentIsAI) return removePin(pinWrapper);
};

// Debounced version of the above function
const debouncedCheck = debounce(processPinLink, 200);

/** Main logic to process pins (or not if already processed) */
const updatePinGrid = (pinWrapper: HTMLDivElement) => {
    const pinLink = pinWrapper.querySelector("a");
    if (
        pinWrapper.querySelector("video") ||
        !pinLink ||
        !pinLink.href.includes("/pin/")
    )
        return;

    const url = pinLink.href;

    if (!processedPins.has(url)) return debouncedCheck(url, pinWrapper);
    else if (processedPins.get(url) === "ai") return removePin(pinWrapper);
};

/**********  MUTATION OBSERVER ***********/

/** Observes the Pinterest grid for new pins being added */
const observer = new MutationObserver((mutations) => {
    for (const mutation of mutations) {
        const validBodes = Array.from(mutation.addedNodes).filter(
            (node) =>
                node instanceof HTMLDivElement &&
                node.matches("[data-grid-item='true']")
        ) as HTMLDivElement[];
        for (const node of validBodes) {
            const pinWrapper =
                (node.querySelector(
                    "[data-test-id='pinWrapper']"
                ) as HTMLDivElement) || null;
            if (pinWrapper) updatePinGrid(pinWrapper);
        }
    }
});

/********** BEGINNING ***********/

const reactRoot = document.getElementById("__PWS_ROOT__");
if (reactRoot) observer.observe(reactRoot, { childList: true, subtree: true });
